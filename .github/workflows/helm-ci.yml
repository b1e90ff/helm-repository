name: Helm Charts CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '*' ]

jobs:
  find-charts:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.find-charts.outputs.charts }}
      matrix: ${{ steps.find-charts.outputs.matrix }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Find Helm charts
      id: find-charts
      run: |
        charts=$(find . -name "Chart.yaml" -not -path "./.git/*" | xargs -I {} dirname {} | tr '\n' ' ')
        echo "charts=$charts" >> $GITHUB_OUTPUT
        echo "Found charts: $charts"
        
        # Create matrix for parallel processing - ensure proper JSON format
        matrix_json=$(echo "$charts" | tr ' ' '\n' | grep -v '^$' | sed 's/^/"/;s/$/"/' | paste -sd, - | sed 's/^/[/;s/$/]/')
        echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
        echo "Matrix: $matrix_json"

  helm-lint:
    runs-on: ubuntu-latest
    needs: find-charts
    if: needs.find-charts.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        chart: ${{ fromJson(needs.find-charts.outputs.matrix) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4.3.1
      with:
        version: '3.14.0'

    - name: Lint Helm chart
      run: |
        echo "üîç Linting chart: ${{ matrix.chart }}"
        if helm lint "${{ matrix.chart }}"; then
          echo "‚úÖ Linting passed for chart: ${{ matrix.chart }}"
        else
          echo "‚ùå Linting failed for chart: ${{ matrix.chart }}"
          exit 1
        fi

  helm-template:
    runs-on: ubuntu-latest
    needs: find-charts
    if: needs.find-charts.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        chart: ${{ fromJson(needs.find-charts.outputs.matrix) }}
        namespace: ['test-namespace', 'production', 'default', 'monitoring']
        release-name: ['test', 'short', 'very-long-release-name-that-might-cause-issues']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4.3.1
      with:
        version: '3.14.0'

    - name: Template Helm chart
      run: |
        chart_name=$(basename "${{ matrix.chart }}")
        echo "üß™ Testing template rendering for chart: ${{ matrix.chart }}"
        echo "üì¶ Release: ${{ matrix.release-name }}, Namespace: ${{ matrix.namespace }}"
        
        if helm template "${{ matrix.release-name }}" "${{ matrix.chart }}" --namespace "${{ matrix.namespace }}" > /dev/null; then
          echo "‚úÖ Template rendering passed"
        else
          echo "‚ùå Template rendering failed"
          exit 1
        fi

  yaml-validation:
    runs-on: ubuntu-latest
    needs: find-charts
    if: needs.find-charts.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        chart: ${{ fromJson(needs.find-charts.outputs.matrix) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4.3.1
      with:
        version: '3.14.0'

    - name: Validate YAML syntax
      run: |
        chart_name=$(basename "${{ matrix.chart }}")
        echo "üîç Validating YAML syntax for chart: ${{ matrix.chart }}"
        
        # Generate templates and validate basic YAML syntax with Python
        if helm template "validate-$chart_name" "${{ matrix.chart }}" --namespace validation | python3 -c "import sys, yaml; yaml.safe_load_all(sys.stdin.read())" > /dev/null 2>&1; then
          echo "‚úÖ YAML syntax validation passed"
        else
          echo "‚ùå YAML syntax validation failed"
          exit 1
        fi

  chart-validation:
    runs-on: ubuntu-latest
    needs: find-charts
    if: needs.find-charts.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        chart: ${{ fromJson(needs.find-charts.outputs.matrix) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check Chart.yaml requirements
      run: |
        echo "üîç Validating Chart.yaml for: ${{ matrix.chart }}"
        
        # Check if Chart.yaml has required fields
        if ! grep -q "^name:" "${{ matrix.chart }}/Chart.yaml"; then
          echo "‚ùå Error: Chart.yaml missing 'name' field"
          exit 1
        fi
        
        if ! grep -q "^version:" "${{ matrix.chart }}/Chart.yaml"; then
          echo "‚ùå Error: Chart.yaml missing 'version' field"
          exit 1
        fi
        
        # Check for proper version format
        version=$(grep "^version:" "${{ matrix.chart }}/Chart.yaml" | cut -d' ' -f2 | tr -d '"')
        if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Error: Invalid version format: $version (must be semver like 1.0.0)"
          exit 1
        fi
        
        # Check if templates directory exists and has content
        if [ ! -d "${{ matrix.chart }}/templates" ] || [ -z "$(ls -A "${{ matrix.chart }}/templates" 2>/dev/null)" ]; then
          echo "‚ö†Ô∏è  Warning: Empty or missing templates directory"
        fi
        
        echo "‚úÖ Chart validation passed"

  conditional-tests:
    runs-on: ubuntu-latest
    needs: find-charts
    if: needs.find-charts.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        chart: ${{ fromJson(needs.find-charts.outputs.matrix) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4.3.1
      with:
        version: '3.14.0'

    - name: Test conditional features
      run: |
        chart_name=$(basename "${{ matrix.chart }}")
        echo "üß™ Testing conditional features for: ${{ matrix.chart }}"
        
        # Test default values
        default_output=$(helm template "test-$chart_name" "${{ matrix.chart }}" --namespace test)
        if [ -z "$default_output" ]; then
          echo "‚ùå Chart produces no output with default values"
          exit 1
        fi
        
        # Test specific conditional features based on chart content
        if grep -q "externalRouting" "${{ matrix.chart }}/values.yaml" 2>/dev/null; then
          echo "Testing externalRouting feature..."
          if ! helm template "test-external" "${{ matrix.chart }}" --set externalRouting.enabled=true --namespace test > /dev/null; then
            echo "‚ùå Failed with externalRouting enabled"
            exit 1
          fi
        fi
        
        if grep -q "autoscaling" "${{ matrix.chart }}/values.yaml" 2>/dev/null; then
          echo "Testing autoscaling feature..."
          if ! helm template "test-hpa" "${{ matrix.chart }}" --set autoscaling.enabled=true --namespace test > /dev/null; then
            echo "‚ùå Failed with autoscaling enabled"
            exit 1
          fi
        fi
        
        if grep -q "config.enabled" "${{ matrix.chart }}/values.yaml" 2>/dev/null; then
          echo "Testing config feature..."
          if ! helm template "test-config" "${{ matrix.chart }}" --set config.enabled=true --namespace test > /dev/null; then
            echo "‚ùå Failed with config enabled"
            exit 1
          fi
        fi
        
        if grep -q "secrets.enabled" "${{ matrix.chart }}/values.yaml" 2>/dev/null; then
          echo "Testing secrets feature..."
          if ! helm template "test-secrets" "${{ matrix.chart }}" --set secrets.enabled=true --namespace test > /dev/null; then
            echo "‚ùå Failed with secrets enabled"
            exit 1
          fi
        fi
        
        echo "‚úÖ Conditional features test passed"

  security-check:
    runs-on: ubuntu-latest
    needs: find-charts
    if: needs.find-charts.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        chart: ${{ fromJson(needs.find-charts.outputs.matrix) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4.3.1
      with:
        version: '3.14.0'

    - name: Security best practices check
      run: |
        echo "ÔøΩ Checking security best practices for: ${{ matrix.chart }}"
        
        # Check for hardcoded namespaces
        namespace_issues=$(grep -r "namespace:" "${{ matrix.chart }}" --include="*.yaml" | grep -v "{{ .Release.Namespace }}" | grep -v "{{ .Values.*namespace" | grep -v "# " || true)
        if [ -n "$namespace_issues" ]; then
          echo "‚ö†Ô∏è  Warning: Found potential hardcoded namespaces:"
          echo "$namespace_issues"
        fi
        
        # Generate template and check for security contexts
        template_output=$(helm template "security-test" "${{ matrix.chart }}" --namespace test)
        
        # Check for security context in deployments
        if echo "$template_output" | grep -q "kind: Deployment"; then
          if ! echo "$template_output" | grep -q "securityContext:"; then
            echo "‚ö†Ô∏è  Warning: Deployment found but no securityContext defined"
          else
            echo "‚úÖ Security context found in deployment"
          fi
        fi
        
        # Check for ServiceAccount
        if echo "$template_output" | grep -q "kind: ServiceAccount"; then
          echo "‚úÖ ServiceAccount defined"
        else
          echo "‚ö†Ô∏è  Info: No ServiceAccount defined (may use default)"
        fi
        
        echo "‚úÖ Security check completed"